pollution
swirl()
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
library(ggplot)
library(ggplot2)
?pipe
setwd("C:/Users/exg91/Dropbox/Coursera/rprog-012/project 3")
setwd("C:/Users/exg91/Downloads")
?load
load("samsungData.rda")
names(samsungData)
table(samsungData$activity)
table(samsungData$subject)
library(dplyr)
samsungData$activity <- factor(samsungData$activity)
sub1 <- subset(samsungData, subject == 1)
plot(sub1[,1], col = sub1$activity, ylab = names(sub1)[1])
names(sub1)
names(sub1)[1]
names(sub1)[1,]
names(sub1)[2]
par(mfrow = c(1, 2), mar = c(5, 4, 1, 1))
samsungData <- transform(samsungData, activity = factor(activity))
sub1 <- subset(samsungData, subject == 1)
plot(sub1[, 1], col = sub1$activity, ylab = names(sub1)[1])
plot(sub1[, 2], col = sub1$activity, ylab = names(sub1)[2])
legend("bottomright", legend = unique(sub1$activity), col = unique(sub1$activity),
pch = 1)
par(mfrow = c(1, 2), mar = c(5, 4, 1, 1))
samsungData <- transform(samsungData, activity = factor(activity))
sub1 <- subset(samsungData, subject == 1)
plot(sub1[, 1], col = sub1$activity, ylab = names(sub1)[1])
plot(sub1[, 2], col = sub1$activity, ylab = names(sub1)[2])
legend("bottomright", legend = unique(sub1$activity), col = unique(sub1$activity),
pch = 1)
source("myplclust.R")
distanceMatrix <- dist(sub1[, 1:3])
hclustering <- hclust(distanceMatrix)
myplclust(hclustering, lab.col = unclass(sub1$activity))
distanceMatrix
svd1 = svd(scale(sub1[, -c(562, 563)]))
par(mfrow = c(1, 2))
plot(svd1$u[, 1], col = sub1$activity, pch = 19)
plot(svd1$u[, 2], col = sub1$activity, pch = 19)
class(svd1)
View(svd1)
summary(svd1)
svd1$u
svd1$u[,1]
svd1$u[,2]
plot(svd1$v[,2] col=sub1$activity)
plot(svd1$v[,2], col=sub1$activity)
maxContrib <- which.max(svd1$v[, 2])
distanceMatrix <- dist(sub1[, c(10:12, maxContrib)])
hclustering <- hclust(distanceMatrix)
myplclust(hclustering, lab.col = unclass(sub1$activity))
maxContrib
names(samsungData)[maxContrib]
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart=100)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart=10000)
table(kClust$cluster, sub1$activity)
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob=0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator ==0, ]
str(trainSpam)
table(trainSpam$tpe)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve+1) ~ trainSpam$type)
plot(log10(trainSpam[,1:4] +1))
hCluster = hclust(distt((trainSpam[, 1:57]))
)
hCluster = hclust(dist(t((trainSpam[, 1:57])))
)
?t
plot(hCluster)
View(hCluster)
class(hCluster)
t(trainSpam(,1:57))
t(trainSpam[],1:57])
t(trainSpam[,1:57])
setwd("C:/Users/exg91/Dropbox/Coursera/repdata-015/PeerAssesment1")
# Load dplyr for data summaries later.
library(dplyr)
# Unzip and store data, clean up the raw file
activity <- unzip("activity.zip")
rawdata <- read.csv(activity)
rm(activity)
# Convert date variable from factor to date, and remove NAs
data <- na.omit(rawdata)
data$date <- as.Date(data$date)
# Group data by date, and summarize the sum of steps
stepsperday <- data %>%
group_by(date) %>%
summarize(TotalSteps=sum(steps))
# Show histogram of steps per day
hist(stepsperday$TotalSteps,
xlab="Total number of steps taken each day",
ylab="Count",
main="Histogram of total number of steps taken each day",
col=3)
meansteps <- mean(stepsperday$TotalSteps)
mediansteps <- median(stepsperday$TotalSteps)
# Group data by 5 minute interval and summarize the average
# number of steps in that interval
fiveaverage <- data %>%
group_by(interval) %>%
summarize(AverageSteps=mean(steps))
# Make an average activity plot
plot(fiveaverage$interval, fiveaverage$AverageSteps,
type="l",
xlab="Interval",
ylab="Average steps taken",
main="Average steps taken during 5 minute interval")
maxstepinterval <- fiveaverage$interval[which.max(fiveaverage$AverageSteps)]
# Calculate number of missing values
missing <- sum(is.na(rawdata$steps))
# Create a filled in dataset by assigning the average value
# for that time interval if an NA is found.
filldata <- rawdata
for (i in 1:nrow(filldata)) {
if (is.na(filldata$steps[i])) {
# Find the index value for when the interval matches the average
ndx <- which(filldata$interval[i] == fiveaverage$interval)
# Assign the value to replace the NA
filldata$steps[i] <- fiveaverage[ndx,]$AverageSteps
}
}
View(filldata)
View(rawdata)
sum(is.na(filldata$steps))
View(fillmeansteps)
fillmeansteps <- mean(fillstepsperday$TotalSteps)
fillmediansteps <- median(fillstepsperday$TotalSteps)
# Group data by date, and summarize the sum of steps
fillstepsperday <- filldata %>%
group_by(date) %>%
summarize(TotalSteps=sum(steps))
# Show histogram of steps per day
hist(fillstepsperday$TotalSteps,
xlab="Total number of steps taken each day",
ylab="Count",
main="Histogram of total number of steps taken each day",
col=3)
fillmeansteps <- mean(fillstepsperday$TotalSteps)
fillmediansteps <- median(fillstepsperday$TotalSteps)
?weekday
?weekday()\
?weekdays
weekdays(filldata$date[1])
filldata <- rawdata
for (i in 1:nrow(filldata)) {
if (is.na(filldata$steps[i])) {
# Find the index value for when the interval matches the average
ndx <- which(filldata$interval[i] == fiveaverage$interval)
# Assign the value to replace the NA
filldata$steps[i] <- fiveaverage[ndx,]$AverageSteps
}
}
# Make sure the date variable is still a date.
filldata$date <- as.Date(filldata$date)
weekdays(filldata$date[1])
weekdays(filldata$date[290])
weekdays(filldata$date[550])
weekdays(filldata$date[650])
filldata$day <- weekday(filldata$date)
filldata$day <- weekdays(filldata$date)
View(filldata)
a <- c("Saturday", "Sunday") %in% filldata$day
a <-  filldata$day %in% c("Saturday", "Sunday")
View(a)
TRUE %in% a
a %in% TRUE
filldata$day <- weekdays(filldata$date)
filldata$daytype <- "weekday"
fllldata$daytype[filldata$day %in c("Saturday", "Sunday") ] <- "weekend"
fllldata$daytype[filldata$day %in c("Saturday", "Sunday")] <- "weekend"
View(filldata)
filldata$day <- weekdays(filldata$date)
filldata$daytype <- "weekday"
fllldata$daytype[filldata$day %in% c("Saturday", "Sunday")] <- "weekend"
filldata$day <- weekdays(filldata$date)
filldata$daytype <- "weekday"
filldata$daytype[filldata$day %in% c("Saturday", "Sunday")] <- "weekend"
weekend %in% filldata$daytype
"weekend" %in% filldata$daytype
table(filldata$daytype)
4608/12960
2/7
dayaverage <- filldata %>%
group_by(interval, daytype) %>%
summarize(AverageSteps=mean(steps))
View(dayaverage)
dayaverage <- filldata %>%
group_by(daytype, interval) %>%
summarize(AverageSteps=mean(steps))
View(dayaverage)
qplot(interval, steps, data=dayaverage,
type="l")
library(ggplot2)
qplot(interval, steps, data=dayaverage,
type="l")
qplot(interval, AverageSteps, data=dayaverage,
type="l")
qplot(interval, AverageSteps, data=dayaverage,
geom="line")
qplot(interval, AverageSteps, data=dayaverage,
type="l"
geom="line",
facet(. ~ daytype))
?qplot
qplot(interval, AverageSteps, data=dayaverage,
type="l"
geom="line",
facets =. ~ daytype)
qplot(interval, AverageSteps, data=dayaverage,
type="l",
geom="line",
facets =. ~ daytype)
qplot(interval, AverageSteps, data=dayaverage,
type="l",
geom="line",
facets =daytype ~ .)
qplot(interval, AverageSteps, data=dayaverage,
type="l",
geom="line",
xlab="Interval",
ylab="Number of Steps (Average)"
main="Average steps taken Weekends vs. Weekdays"
facets =daytype ~ .)
qplot(interval, AverageSteps, data=dayaverage,
type="l",
geom="line",
xlab="Interval",
ylab="Number of Steps (Average)",
main="Average steps taken Weekends vs. Weekdays",
facets =daytype ~ .)
qplot(interval, AverageSteps, data=dayaverage,
type="l",
geom="line",
xlab="Interval",
ylab="Number of Steps (Average)",
main="Average steps taken Weekends vs. Weekdays") + facet_wrap(~ daytype, ncol=1)
qplot(interval, AverageSteps, data=dayaverage,
type="l",
geom="line",
xlab="Interval",
ylab="Number of Steps (Average)",
main="Average steps taken Weekends vs. Weekdays",
facets =daytype ~ .)
qplot(interval, aes(AverageSteps), data=dayaverage,
type="l",
geom="line",
xlab="Interval",
ylab="Number of Steps (Average)",
main="Average steps taken Weekends vs. Weekdays",
facets =daytype ~ .)
qplot(interval, AverageSteps, data=dayaverage,
type="l",
geom="line",
xlab="Interval",
ylab="Number of Steps (Average)",
main="Average steps taken Weekends vs. Weekdays",
facets =daytype ~ .)
